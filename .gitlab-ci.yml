image: williamyeh/ansible:ubuntu18.04

before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )"

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  ##
  ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
  ## with your own domain name. You can copy and repeat that command if you have
  ## more than one server to connect to.
  ##
  - ssh-keyscan -p "$SSH_PORT" "$SSH_HOST" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

  ##
  ## Alternatively, assuming you created the SSH_SERVER_HOSTKEYS variable
  ## previously, uncomment the following two lines instead.
  ##
  #- echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
  #- chmod 644 ~/.ssh/known_hosts
  ##
  ## You can optionally disable host key checking. Be aware that by adding that
  ## you are suspectible to man-in-the-middle attacks.
  ## WARNING: Use this only with the Docker executor, if you use it with shell
  ## you will overwrite your user's SSH config.
  ##
  #- '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  ##
  ## Optionally, if you will be using any Git commands, set the user name and
  ## email.
  ##
  # - git config --global user.email "darth@empire.com"
  # - git config --global user.name "Darth Vader"

build-containers:
  image: docker:19.03.11
  stage: build
  services:
    - docker:19.03.11-dind
  before_script:
    # Install docker-compose
    - docker info
    - apk add --update py-pip python3-dev build-base libffi-dev openssl-dev
    - pip install docker-compose

  script:
    - docker-compose build
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose push

  # after_script:
    # - docker logout "$CI_REGISTRY"

deploy_tigra:
  stage: deploy
  script:
    # Download if not exists
    - cd ansible && echo $ANSIBLE_PASSWORD > vault-pass.txt && ansible-playbook -i hosts site.yml --vault-password-file vault-pass.txt
    # Deploy new versio of services
    # - ssh -l $SSH_USER $SSH_HOST -p $SSH_PORT "cd deploy/smart-dep && docker-compose -p smartdep stop && SMART_ENV=dev docker-compose -p smartdep up --build -d --scale emulator=5"
    # Apply migrations
    # - ssh -l $SSH_USER $SSH_HOST -p $SSH_PORT "cd deploy/smart-dep && sleep 3 && make mgr-upgrade"
  # only:
    # - develop

